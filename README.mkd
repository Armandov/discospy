# python3-discogs-client

This is an active fork of the official "Discogs API client for Python", which was deprecated by discogs.com as of June 2020. We think it is a very useful Python module and decided to continue maintaining it. If you'd like to contribute your code, you are very welcome to submit a pull-request as described [here](#contributing).

[python3-discogs-client](https://pypi.org/project/python3-discogs-client/) enables you to query the Discogs database (discogs.com) through its REST-API for information on artists, releases, labels, users, Marketplace listings, and more. It also supports OAuth 1.0a authorization, which allows you to change user data such as profile information, collections and wantlists, inventory, and orders.

Find usage information on this README page or search and ask in the API section of the Discogs developer forum at https://www.discogs.com/forum/topic/1082.

[![Build Status](https://travis-ci.org/joalla/discogs_client.svg?branch=master)](https://travis-ci.org/joalla/discogs_client)
[![Coverage Status](https://coveralls.io/repos/github/joalla/discogs_client/badge.svg)](https://coveralls.io/github/joalla/discogs_client)

## Installation

Install [the client from PyPI](https://pypi.org/project/python3-discogs-client/) using your favorite package manager.

```sh
$ pip install python3-discogs-client
```

## Quickstart

### Instantiating the client object

```python
>>> import discogs_client
>>> d = discogs_client.Client('ExampleApplication/0.1')
```

_Have a look at the [quickstart section](https://python3-discogs-client.readthedocs.org/en/latest/quickstart.html) of our documentation pages._

### Authorization (optional)

There are a couple of different authorization methods you can choose from depending on your requirements.

#### OAuth authentication

This method will allow your application to make requests on behalf of any user who logs in.

For this, specify your app's consumer key and secret:

```python
>>> d.set_consumer_key('key-here', 'secret-here')
>>> # Or you can do this when you instantiate the Client
```

Then go through the OAuth 1.0a process. In a web app, we'd specify a `callback_url`. In this example, we'll use the OOB flow.

```python
>>> d.get_authorize_url()
('request-token', 'request-secret', 'authorize-url-here')
```
    
The client will hang on to the access token and secret, but in a web app, you'd want to persist those and pass them into a new `Client` instance on the next request.

Next, visit the authorize URL, authenticate as a Discogs user, and get the verifier:

```python
>>> d.get_access_token('verifier-here')
('access-token-here', 'access-secret-here')
```

Now you can make requests on behalf of the user.

```python
>>> me = d.identity()
>>> "I'm {0} ({1}) from {2}.".format(me.name, me.username, me.location)
u"I'm Joe Bloggs (example) from Portland, Oregon."
>>> len(me.wantlist)
3
>>> me.wantlist.add(d.release(5))
>>> len(me.wantlist)
4
```

#### User-token authentication

This is one of the simplest ways to authenticate and become able to perform requests requiring authentication, such as search (see below). The downside is that you'll be limited to the information only your user account can see (i.e., no requests on behalf of other users).

For this, you'll need to generate a user-token from your developer settings on the Discogs website.

```python
>>> d = discogs_client.Client('ExampleApplication/0.1', user_token="my_user_token")
```

#### More information

_Have a look at the [authentication section](https://python3-discogs-client.readthedocs.org/en/latest/authentication.html) of our documentation pages._

### Fetching data

Use methods on the client to fetch objects. You can search for objects:

```python
>>> results = d.search('Stockholm By Night', type='release')
>>> results.pages
1
>>> artist = results[0].artists[0]
>>> artist.name
u'Persuader, The'
```

Or fetch them by ID:

```python
>>> artist.id
1
>>> artist == d.artist(1)
True
```

You can drill down as far as you like.

```python
>>> releases = d.search('Bit Shifter', type='artist')[0].releases[1].\
...     versions[0].labels[0].releases
>>> len(releases)
134
```

_Have a look at the [fetching data section](https://python3-discogs-client.readthedocs.org/en/latest/fetching_data.html) of our documentation pages._


## Marketplace listing

As an authenticated user you can add, edit and delete your own marketplace listings.

```python
from discogs_client import Condition, Status, Sort
# Add new listing
me.inventory.add_listing(
    release=15246519,                       # Also accepts Release object
    condition=Condition.MINT,               # condition set to 'Mint (M)'
    price=29.99,
    status=Status.DRAFT,                    # status set to 'Draft'
    sleeve_condition=Condition.NEAR_MINT    # sleeve condition set to 'Near Mint (NM or M-)'
)
```

_To learn how to update your inventory and delete listings, have a look at the [marketplace listing section](https://python3-discogs-client.readthedocs.org/en/latest/listing.html) of our documentation pages._


## Contributing

1. Fork this repo
2. Create a feature branch
3. Open a pull-request


## For more information

- Read through [python3-discogs-client.readthedocs.org](https://pyhon3-discogs-client.readthedocs.org) for step by step instructions.
- Check the [discogs_client Python package documentation](python3-discogs-client.readthedocs.org/en/latest/discogs_client.html) to find out details on specific modules, classes, methods, ...
- Or just spin up a REPL and use `dir()` on things :)
